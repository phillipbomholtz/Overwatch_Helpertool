/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package overwatchhelpertool;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;

/**
 *
 * @author Phillip
 */
public class PlayerScheduleMenuMonday extends javax.swing.JPanel {

    /**
     * Creates new form temp
     */
    public PlayerScheduleMenuMonday() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        mondayTitle = new javax.swing.JLabel();
        text1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        Date date = new Date();
        SpinnerDateModel DATE1 =
        new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        TimeSpinMonday1 = new javax.swing.JSpinner(DATE1);
        split1 = new javax.swing.JLabel();
        SpinnerDateModel DATE2 =
        new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        TimeSpinMonday2 = new javax.swing.JSpinner(DATE2);
        text2 = new javax.swing.JLabel();
        stretchOneMondaySelect = new javax.swing.JRadioButton();
        SpinnerDateModel DATE3 =
        new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        TimeSpinMonday3 = new javax.swing.JSpinner(DATE3);
        split2 = new javax.swing.JLabel();
        SpinnerDateModel DATE4 =
        new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        TimeSpinMonday4 = new javax.swing.JSpinner(DATE4);
        SpinnerDateModel DATE5 =
        new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        TimeSpinMonday5 = new javax.swing.JSpinner(DATE5);
        split3 = new javax.swing.JLabel();
        SpinnerDateModel DATE6 =
        new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        TimeSpinMonday6 = new javax.swing.JSpinner(DATE6);
        SpinnerDateModel DATE7 =
        new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        TimeSpinMonday7 = new javax.swing.JSpinner(DATE7);
        split4 = new javax.swing.JLabel();
        SpinnerDateModel DATE8 =
        new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        TimeSpinMonday8 = new javax.swing.JSpinner(DATE8);
        stretchTwoMondaySelect = new javax.swing.JRadioButton();
        stretchThreeMondaySelect = new javax.swing.JRadioButton();
        stretchFourMondaySelect = new javax.swing.JRadioButton();

        setBackground(new java.awt.Color(204, 204, 204));
        setPreferredSize(new java.awt.Dimension(1000, 472));

        mondayTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        mondayTitle.setText("Monday");

        text1.setText("Here are the start and stop time");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("How do i use this menu?\n\nIn this menu you can setup the\nschedule of when you are going to be\navailable.\n\nSimple select the start and stop times\nof when you are available.\n\nIt is assumed that you \nmight be available at multiple \ndifferent stretches of time in one \nday.\n\nIf this is the case, simply select\nMore than one box and the time\nIn which you are available. \n\nIf you are not available at all this\nday, don't select any.");
        jScrollPane2.setViewportView(jTextArea1);

        JSpinner.DateEditor spin1 = new JSpinner.DateEditor(TimeSpinMonday1, "HH:mm");
        TimeSpinMonday1.setEditor(spin1);

        split1.setText("to");

        JSpinner.DateEditor spin2 = new JSpinner.DateEditor(TimeSpinMonday2, "HH:mm");
        TimeSpinMonday2.setEditor(spin2);

        text2.setText("Select the stretches of time you are available for this day.");

        stretchOneMondaySelect.setBackground(new java.awt.Color(204, 204, 204));
        stretchOneMondaySelect.setText("1st Stretch");
        stretchOneMondaySelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stretchOneMondaySelectActionPerformed(evt);
            }
        });

        JSpinner.DateEditor spin3 = new JSpinner.DateEditor(TimeSpinMonday3, "HH:mm");
        TimeSpinMonday3.setEditor(spin3);

        split2.setText("to");

        JSpinner.DateEditor spin4 = new JSpinner.DateEditor(TimeSpinMonday4, "HH:mm");
        TimeSpinMonday4.setEditor(spin4);

        JSpinner.DateEditor spin5 = new JSpinner.DateEditor(TimeSpinMonday5, "HH:mm");
        TimeSpinMonday5.setEditor(spin5);

        split3.setText("to");

        JSpinner.DateEditor spin6 = new JSpinner.DateEditor(TimeSpinMonday6, "HH:mm");
        TimeSpinMonday6.setEditor(spin6);

        JSpinner.DateEditor spin7 = new JSpinner.DateEditor(TimeSpinMonday7, "HH:mm");
        TimeSpinMonday7.setEditor(spin7);

        split4.setText("to");

        JSpinner.DateEditor spin8 = new JSpinner.DateEditor(TimeSpinMonday8, "HH:mm");
        TimeSpinMonday8.setEditor(spin8);

        stretchTwoMondaySelect.setBackground(new java.awt.Color(204, 204, 204));
        stretchTwoMondaySelect.setText("2nd Stretch");

        stretchThreeMondaySelect.setBackground(new java.awt.Color(204, 204, 204));
        stretchThreeMondaySelect.setText("3rd Stretch");

        stretchFourMondaySelect.setBackground(new java.awt.Color(204, 204, 204));
        stretchFourMondaySelect.setText("4th Stretch");
        stretchFourMondaySelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stretchFourMondaySelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(TimeSpinMonday3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(split2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TimeSpinMonday4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(TimeSpinMonday5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(split3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TimeSpinMonday6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(TimeSpinMonday7, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(split4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TimeSpinMonday8, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(stretchThreeMondaySelect, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(stretchTwoMondaySelect, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                            .addComponent(stretchFourMondaySelect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TimeSpinMonday1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(split1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TimeSpinMonday2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(stretchOneMondaySelect, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(mondayTitle)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(text1)
                        .addGap(18, 18, 18)
                        .addComponent(text2, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mondayTitle)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(text1)
                            .addComponent(text2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TimeSpinMonday1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(split1)
                            .addComponent(TimeSpinMonday2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stretchOneMondaySelect, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TimeSpinMonday3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(split2)
                            .addComponent(TimeSpinMonday4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stretchTwoMondaySelect, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TimeSpinMonday5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(split3)
                            .addComponent(TimeSpinMonday6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stretchThreeMondaySelect, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TimeSpinMonday7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(split4)
                            .addComponent(TimeSpinMonday8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stretchFourMondaySelect, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(49, Short.MAX_VALUE))
        );
    }// </editor-fold>                        

    private void stretchOneMondaySelectActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        // TODO add your handling code here:
    }                                                      

    private void stretchFourMondaySelectActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        // TODO add your handling code here:
    }                                                       

 public ArrayList<TimeStretch> GiveTimeStreches(){
        ArrayList<TimeStretch> tempList = new ArrayList<>();
        
        //for first stretch
        if(stretchOneMondaySelect.isSelected()){
            //get hours an minuts of start
            String startTime=getValueString(TimeSpinMonday1.getValue().toString());
            StringTokenizer startReader = new StringTokenizer(startTime,"(:)");
            int startHour = Integer.parseInt(startReader.nextToken());
            int startMminut = Integer.parseInt(startReader.nextToken());
            
            
            //get hours an minuts of end
            String endTime = getValueString(TimeSpinMonday2.getValue().toString());
            StringTokenizer endReader = new StringTokenizer(endTime,"(:)");
            int endHour = Integer.parseInt(endReader.nextToken());
            int endMinute = Integer.parseInt(endReader.nextToken());

            int startInSeconds = getInSeconds(startHour,startMminut);
            int endInSeconds = getInSeconds(endHour,endMinute);
            
            //collect and put in a timestretch and save to list if start is smaller than end
            if(startInSeconds < endInSeconds){
                tempList.add(new TimeStretch(startInSeconds,endInSeconds));
            }else{
                JOptionPane.showMessageDialog(null,"Error in "+mondayTitle.getText()+". one start time is bigger or equal to end time");  //message for error
            }
        }
        
        //for seconds stretch
        if(stretchTwoMondaySelect.isSelected()){
            //get hours an minuts of start
            String startTime=getValueString(TimeSpinMonday3.getValue().toString());
            StringTokenizer startReader = new StringTokenizer(startTime,"(:)");
            int startHour = Integer.parseInt(startReader.nextToken());
            int startMminut = Integer.parseInt(startReader.nextToken());
            
            
            //get hours an minuts of end
            String endTime = getValueString(TimeSpinMonday4.getValue().toString());
            StringTokenizer endReader = new StringTokenizer(endTime,"(:)");
            int endHour = Integer.parseInt(endReader.nextToken());
            int endMinute = Integer.parseInt(endReader.nextToken());

            int startInSeconds = getInSeconds(startHour,startMminut);
            int endInSeconds = getInSeconds(endHour,endMinute);
            
            //collect and put in a timestretch and save to list if start is smaller than end
            if(startInSeconds < endInSeconds){
                tempList.add(new TimeStretch(startInSeconds,endInSeconds));
            }else{
                JOptionPane.showMessageDialog(null,"Error in "+mondayTitle.getText()+". one start time is bigger or equal to end time");  //message for error
            }
        }
        
        //for third stretch
        if(stretchThreeMondaySelect.isSelected()){
            //get hours an minuts of start
            String startTime=getValueString(TimeSpinMonday5.getValue().toString());
            StringTokenizer startReader = new StringTokenizer(startTime,"(:)");
            int startHour = Integer.parseInt(startReader.nextToken());
            int startMminut = Integer.parseInt(startReader.nextToken());
            
            
            //get hours an minuts of end
            String endTime = getValueString(TimeSpinMonday6.getValue().toString());
            StringTokenizer endReader = new StringTokenizer(endTime,"(:)");
            int endHour = Integer.parseInt(endReader.nextToken());
            int endMinute = Integer.parseInt(endReader.nextToken());

            int startInSeconds = getInSeconds(startHour,startMminut);
            int endInSeconds = getInSeconds(endHour,endMinute);
            
            //collect and put in a timestretch and save to list if start is smaller than end
            if(startInSeconds < endInSeconds){
                tempList.add(new TimeStretch(startInSeconds,endInSeconds));
            }else{
                JOptionPane.showMessageDialog(null,"Error in "+mondayTitle.getText()+". one start time is bigger or equal to end time");  //message for error
            }
        }
        
        //for fourth stretch
        if(stretchFourMondaySelect.isSelected()){
            //get hours an minuts of start
            String startTime=getValueString(TimeSpinMonday7.getValue().toString());
            StringTokenizer startReader = new StringTokenizer(startTime,"(:)");
            int startHour = Integer.parseInt(startReader.nextToken());
            int startMminut = Integer.parseInt(startReader.nextToken());
            
            
            //get hours an minuts of end
            String endTime = getValueString(TimeSpinMonday8.getValue().toString());
            StringTokenizer endReader = new StringTokenizer(endTime,"(:)");
            int endHour = Integer.parseInt(endReader.nextToken());
            int endMinute = Integer.parseInt(endReader.nextToken());

            int startInSeconds = getInSeconds(startHour,startMminut);
            int endInSeconds = getInSeconds(endHour,endMinute);
            
            //collect and put in a timestretch and save to list if start is smaller than end
            if(startInSeconds < endInSeconds){
                tempList.add(new TimeStretch(startInSeconds,endInSeconds));
            }else{
                JOptionPane.showMessageDialog(null,"Error in "+mondayTitle.getText()+". one start time is bigger or equal to end time");  //message for error
            }
        }
        return tempList;
    }  
    
    //get the string with the time value in hh:mm format
    private String getValueString(String value){
        StringTokenizer reader = new StringTokenizer(value,"( )");   
        reader.nextToken();reader.nextToken();reader.nextToken();    //read and discard junk
        return reader.nextToken();                                   //get wanted ino
    }
    
    private int getInSeconds(int hour,int min){
        return (hour*3600)+(min*60);            //return total in seconds
    }
    // Variables declaration - do not modify                     
    private javax.swing.JSpinner TimeSpinMonday1;
    private javax.swing.JSpinner TimeSpinMonday2;
    private javax.swing.JSpinner TimeSpinMonday3;
    private javax.swing.JSpinner TimeSpinMonday4;
    private javax.swing.JSpinner TimeSpinMonday5;
    private javax.swing.JSpinner TimeSpinMonday6;
    private javax.swing.JSpinner TimeSpinMonday7;
    private javax.swing.JSpinner TimeSpinMonday8;
    private javax.swing.JLabel split1;
    private javax.swing.JLabel split2;
    private javax.swing.JLabel split3;
    private javax.swing.JLabel split4;
    private javax.swing.JLabel text1;
    private javax.swing.JLabel text2;
    private javax.swing.JLabel mondayTitle;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JRadioButton stretchFourMondaySelect;
    private javax.swing.JRadioButton stretchOneMondaySelect;
    private javax.swing.JRadioButton stretchThreeMondaySelect;
    private javax.swing.JRadioButton stretchTwoMondaySelect;
    // End of variables declaration                   
}
